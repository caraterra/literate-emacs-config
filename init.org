#+title: A Literate GNU Emacs Configuration
#+property: header-args :tangle ~/.emacs.d/init.el

* Inhibiting Garbage Collections During Initialization

This setting increases the garbage collection threshold and percentage to inhibit collections during startup. Once startup has completed, these values are reset to something more reasonable. This is done in [[* Restoring Garbage Collection Thresholds]].

#+begin_src emacs-lisp
  (defconst gc-cons-threshold-low (* 3 1024 1024))
  (defconst gc-cons-percentage-low gc-cons-percentage)

  (defconst gc-cons-threshold-high (* 128 1024 1024))
  (defconst gc-cons-percentage-high 0.5)

  (setq gc-cons-percentage gc-cons-percentage-high
	gc-cons-threshold gc-cons-threshold-high)
#+end_src

* Setting Up The Repositories

This section populates the ~package-archives~ list with the desired Emacs package repositories. The elements of this list are /name-URL/ pairs.

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (setq package-install-upgrade-built-in t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+end_src

* Configuring ~use-package~

[[https://github.com/jwiegley/use-package][use-package]] provides macros for loading and configuring Emacs packages. We'll load it here, installing it from the repositories if it's not already installed.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+end_src

* Killing All Open Buffers

This function will switch to the scratch buffer, kill all other open buffers, and delete all but one window. I'll use this when I want to close out everything I've been working on, while still keeping Emacs open. We'll create a keybinding for this in [[*Configuring Emacs]].

#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    "Kill all buffers except the scratch buffer."
    (interactive)
    (delete-other-windows)
    (switch-to-buffer (get-scratch-buffer-create))
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

* Configuring Emacs

Here, I put my base Emacs configurations into a single ~use-package~ block to keep everything in one place, and to shorten some common expressions using the ~:hook~ and ~:custom~ options.

#+begin_src emacs-lisp :noweb yes
  (use-package emacs
    :bind ("C-x M-k" . kill-all-buffers)
    :config
    ;; Disable the tool bar (graphical only)
    (tool-bar-mode 0)
    ;; Enable menu bar in graphical mode
    (menu-bar-mode (if (display-graphic-p) 1 0))
    ;; Use light them in graphical mode and dark theme otherwise
    (load-theme (if (display-graphic-p) 'modus-operandi 'modus-vivendi))
    ;; Enable column numbering
    (column-number-mode)
    ;; Disable scroll bars
    (scroll-bar-mode 0)
    ;; Use minimal fringes
    (fringe-mode '(1 . 1))
    ;; Enable performance mitigations for files with long lines
    (global-so-long-mode)
    ;; Silence warnings from native compilation
    <<silence-native-comp-warnings>>
    :hook
    ;; Enable line numbering in `prog-mode'
    (prog-mode . display-line-numbers-mode)
    :custom
    ;; Set relative line numbering
    (display-line-numbers-type 'relative)
    ;; Don't display the startup message
    (inhibit-startup-message t)
    ;; Make prompt in `comint-mode' readonly
    (comint-prompt-read-only t)
    ;; Disable the bell
    (ring-bell-function #'ignore))
#+end_src

** Silencing Native Compilation Warnings

When natively compiling Emacs Lisp packages, some warnings may be produced by the compiler. Only the package developers need to worry about these, so we'll silence them here.

#+NAME: silence-native-comp-warnings
#+begin_src emacs-lisp :tangle no
  (when (native-comp-available-p)
    (setq native-comp-async-report-warnings-errors 'silent))
#+end_src

* Populating the Executable Path

When Emacs is run as a graphical application in MacOS, or as a daemon, it inherits a minimal set of environment variables from the system. If the user sets environment variables in their shell configuration, these won't be picked up by Emacs, causing some processes to behave unexpectedly.

This package remedies this issue by forcing Emacs to inherit environment variables from the user's shell at runtime.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :functions exec-path-from-shell-initialize
    :custom (exec-path-from-shell-arguments nil)
    :config
    (when (or (memq window-system '(mac ns x))
	      (daemonp)) (exec-path-from-shell-initialize)))
#+end_src

* Using VIM Bindings

#+begin_src emacs-lisp
  (setq scroll-step 1
	scroll-conservatively 10000
	next-screen-context-lines 5
	line-move-visual nil)
#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :functions evil-mode
    :custom (evil-undo-system 'undo-redo)
    :config (evil-mode 1))
#+end_src

** VIM Surround

The [[https://github.com/emacs-evil/evil-surround][evil-surround]] package provides the same functionality as tpope's VIM plugin, [[https://github.com/tpope/vim-surround][vim-surround]].

#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :requires evil
    :functions global-evil-surround-mode
    :config
    (global-evil-surround-mode 1))
#+end_src

#+ATTR_LATEX: :environment tabularx :width \textwidth :align XX
| Mapping                       | Description                                                                                               |
|-------------------------------+-----------------------------------------------------------------------------------------------------------|
| ~ds<target>~                  | Deletes the target.                                                                                       |
| ~cs<target><replacement>~     | Replaces the target with the given replacement.                                                           |
| ~ys<textobject><replacement>~ | Surrounds the text object with the given replacement.                                                     |
| ~yss<replacement>~            | Surrounds the whole line with the given replacement, ignoring leading whitespace.                         |
| ~yS<textobject><replacement>~ | Surrounds the text object with the given replacement, indenting the content and placing it on a new line. |
| ~ySS<replacement>~            | Surrounds the whole line with the given replacement, indenting the content and placing it on a new line.  |
| ~S<replacement>~              | In visual mode, surround the selection with the given replacement.                                        |
| ~gS<replacement>~             | In visual mode, surround the selection with the given replacement, suppressing automatic indentation.     |

| Mapping          | Target                                  |
|------------------+-----------------------------------------|
| ~(~, ~)~, or ~b~ | Parentheses, i.e. ~(~ and ~)~           |
| ~{~, ~}~, or ~B~ | Braces, i.e. ~{~ and ~}~                |
| ~[~, ~]~, or ~r~ | Brackets, i.e. ~[~ and ~]~              |
| ~>~ or ~a~       | Angle brackets, i.e. ~<~ and ~>~        |
| ~<~  or ~t~      | HTML or XML tags, e.g. ~<p>~ and ~</p>~ |

| Mapping              | Replacement                                              |
|----------------------+----------------------------------------------------------|
| ~)~ or ~b~           | Parentheses, e.g. ~(foo)~                                |
| ~(~                  | Parentheses with inner space, e.g. ~( foo )~             |
| ~}~ or ~B~           | Braces, e.g. ~{foo}~                                     |
| ~{~                  | Braces with inner space, e.g. ~{ foo }~                  |
| ~]~ or ~r~           | Brackets, e.g. ~[foo]~                                   |
| ~[~                  | Brackets with inner space, e.g. ~[ foo ]~                |
| ~>~ or ~a~           | Angle brackets, e.g. ~<foo>~                             |
| ~<~ or ~t~           | An HTML or XML tag. Prompts for tag attributes.          |
| ~f~                  | A function. Prompts for function name, e.g. ~print(foo)~ |

* Document Conversion with Pandoc

Pandoc allows us to convert our working file into one of many document formats. The [[https://joostkremers.github.io/pandoc-mode/][pandoc-mode]] plugin integrates this tool in the editor with an interactive menu. Here, I have the mode enabled when working in Markdown or TeX mode.

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :ensure t
    :hook
    (markdown-mode . pandoc-mode)
    (tex-mode . pandoc-mode))
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

* Using the System Clipboard

When running Emacs in the terminal, yanked text is copied to an internal buffer. The ~xclip~ package allows Emacs to copy and paste from the system clipboard using external command line tools.

#+begin_src emacs-lisp
  (use-package xclip
    :ensure t
    :functions xclip-mode
    :config
    (xclip-mode 1))
#+end_src

* EditorConfig Support

The EditorConfig package looks for ~.editorconfig~ files in the project directory and configures editor settings based on the directives within the file. See the [[https://editorconfig.org/][EditorConfig documentation]] for more information.

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :functions editorconfig-mode
    :config
    (editorconfig-mode 1))
#+end_src

#+ATTR_LATEX: :environment tabularx :width \textwidth :align XX
| EditorConfig Properties    | Description                                                                                 |
|----------------------------+---------------------------------------------------------------------------------------------|
| ~indent_style~             | Indent with tabs or spaces.                                                                 |
| ~indent_size~              | The number of columns used for each indentation level, as well as the width of soft tabs.   |
| ~tab_width~                | The number of columns used to represent a tab character.                                    |
| ~end_of_line~              | Determines how line breaks are represented.                                                 |
| ~charset~                  | Determines the character set.                                                               |
| ~trim_trailing_whitespace~ | Whether or not to remove any whitespace characters preceding newline characters.            |
| ~insert_final_newline~     | Whether or not to ensure file ends with a newline when saving.                              |
| ~max_line_length~          | Force hard wrapping at the given number of characters, or don't force hard wrapping at all. |
| ~root~                     | Whether or not to stop the ~.editorconfig~ file search on the current file.                 |

* Customizing the Minibuffer

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defines which-key-idle-delay
    :functions which-key-mode
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode 1))
#+end_src

[[https://github.com/minad/vertico][Vertico]] displays minibuffer completions in a vertical interactive menu.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :functions vertico-mode
    :config
    (vertico-mode))
#+end_src

[[https://github.com/minad/marginalia][Marginalia]] adds annotations to items in the minibuffer completions.

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer. To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    ;; The :init section is always executed.
    :init
    ;; Marginalia must be activated in the :init section of use-package
    ;; such that the mode gets enabled right away. Note that this forces
    ;; loading the package.
    (marginalia-mode))
#+end_src

* Language Support

** CC Mode

CC Mode is a major mode supporting C, C++, Objective-C, Java, Cobra IDL, Pike and AWK.

This function sets ~compile-command~ based on the presence of a Makefile in the current directory. If there is no Makefile present, we will attempt to build an executable from the current buffer file using ~make~'s implicit rules.

#+begin_src emacs-lisp
  (defun set-cc-compile-command ()
    (unless (or (file-exists-p "makefile")
		(file-exists-p "Makefile")
		(file-exists-p "GNUmakefile")
		(not buffer-file-name))
      (setq-local compile-command
		  (concat "make -k "
			  (shell-quote-argument (file-name-sans-extension buffer-file-name))))))
#+end_src

By setting ~c-default-style~, we can determine what indentation style each language mode uses. We'll have Java and AWK use their own styles, and have everything else use the Linux indentation style, rather than the default two-space GNU style.

We'll bind ~recompile~ to ~C-c c~ and we'll set ~compile-command~ using the ~set-cc-compile-command~ function from above.

#+begin_src emacs-lisp
  (use-package cc-mode
    :bind ("C-c c" . recompile)
    :hook (c-mode-common . set-cc-compile-command)
    :custom (c-default-style '((java-mode . "java")
			       (awk-mode  . "awk")
			       (other     . "linux"))))
#+end_src

** Haskell

Here ~haskell-interactive-popup-errors~ is set to ~nil~ to prevent errors from being shown in a seperate buffer. Instead errors are shown in the minibuffer, or in the interactive Haskell buffer if one exists.

#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :custom (haskell-interactive-popup-errors nil)
    :mode ((rx ".hs" eos) . haskell-mode))
#+end_src

** Markdown

[[https://jblevins.org/projects/markdown-mode/][Markdown Mode]] adds editor support for Markdown. Setting ~markdown-asymmetic-header~ to ~t~ allows for ~# Header~ style headers to be used in addition to ~# Header #~ style headers and setting ~markdown-enable-math~ to ~t~ enables support for LaTeX math expressions.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (rx "." (or "md" "markdown") eos)
    :defines
    markdown-asymmetric-header
    markdown-enable-math
    :hook (markdown-mode . visual-line-mode)
    :custom
    (markdown-asymmetric-header t)
    (markdown-enable-math t))
#+end_src

** Org

Enabling ~visual-line-mode~ wraps lines on the nearest space. While this makes prose easier to read, it will make large tables rather unreadable. You can toggle this mode by running ~visual-line-mode~ interactively.

Setting ~org-log-done~ to ~'time~ places the time and date under completed TODO items.

In Emacs, files in INI format are handled by ~conf-mode~. I set source code blocks to recognize the ~ini~ language option as using ~conf-mode~, so the code displays properly in the editor, as well as when it's exported to LaTeX with minted.

#+begin_src emacs-lisp :noweb yes
  (use-package org
    :config
    <<org-babel-config>>
    (add-to-list 'org-src-lang-modes '("ini" . conf))
    :hook (org-mode . visual-line-mode)
    :custom (org-log-done 'time))
#+end_src

*** Adding additional language support to Org Babel

Org Babel only enables support for Emacs Lisp by default. We can enable other languages by adding them to the list in the following command.

#+NAME: org-babel-config
#+begin_src emacs-lisp :tangle no
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((C . t)
				 (emacs-lisp . t)
				 (scheme . t)))
#+end_src

*** Exporting Org as LaTeX

#+begin_src emacs-lisp :noweb yes
  (use-package ox-latex
    :after org
    :config
    <<org-latex-include-minted>>
    <<org-latex-include-geometry>>
    <<org-latex-include-tabularx>>
    :custom
    (org-latex-listings 'minted)
    (org-latex-pdf-process
     '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
       "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    <<org-latex-minted-breaklines>>)
#+end_src

**** Tweaking the page layout

By default, the LaTeX article class produces pages with massive margins. We can set it to use one inch margins by including the ~geometry~ package with the ~margin~ variable set.

#+NAME: org-latex-include-geometry
#+begin_src emacs-lisp :tangle no
    (add-to-list 'org-latex-packages-alist '("margin=1in" "geometry"))
#+end_src

**** Customizing LaTeX source code output

Org Babel tends to use the LaTeX package, [[https://ctan.org/pkg/listings?lang=en][listings]], to generate source code blocks. I think the [[https://ctan.org/pkg/minted?lang=en][minted]] package produces much prettier output, so we can force Org Babel to use it instead.

#+NAME: org-latex-include-minted
#+begin_src emacs-lisp :tangle no
    (add-to-list 'org-latex-packages-alist '("" "minted"))
#+end_src

In order for /minted/ to work, [[https://pygments.org/][pygments]] must be installed. Adding the ~-shell-escape~ flag to our invokation of ~pdflatex~ allows the process to access the ~pygmentize~ binary on the system.

We can also tell /minted/ to break long lines instead of having them run off the page.

#+NAME: org-latex-minted-breaklines
#+begin_src emacs-lisp :tangle no
  (org-latex-minted-options '(("breaklines" "true")
			      ("breakanywhere" "true")))
#+end_src

**** Wrapping text in LaTeX tables

When exporting an Org document to a PDF using LaTeX, tables with particularly long lines of text may extend off the page. The [[https://texdoc.org/serve/tabularx/0][tabularx]] package implements a version of the tabular environment where the widths of some columns are calculated so that the table fits within a given width.

#+NAME: org-latex-include-tabularx
#+begin_src emacs-lisp :tangle no
    (add-to-list 'org-latex-packages-alist '("" "tabularx"))
#+end_src

This package provides a new ~tabularx~ environment as well as a new alignment specifier, ~X~, which states that the column's width should be determined dynamically.

We can make an Org table use this environment by supplying the ~:environment tabularx~ option in an ~#+ATTR_LATEX~ directive above the table. We can set the width of the table to the width of the text block using the ~:width \textwidth~ option in that same directive, and set all columns to be dynamically sized using the ~:align XXX~ option. You'll have to replace the ~X~'s in this option with a number of ~X~'s equal to the number of columns in your table.

*** Exporting Org as Markdown

This directive enables the built-in package that allows Org files to be exported in Markdown format.

#+begin_src emacs-lisp
  (use-package ox-md
    :after org)
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python
    :ensure t
    :mode (rx ".py" eos))
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode (rx ".rs" eos))
#+end_src

** Lisps

[[https://paredit.org/][ParEdit]] is a minor mode that adds functionality for editing S-expressions. We enable its mode whenever the mode for any Lisp-like language is enabled. Dan Midwood has created [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][an animated guide]] on how to use this mode.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook
    (common-lisp-mode . paredit-mode)
    (emacs-lisp-mode . paredit-mode)
    (scheme-mode . paredit-mode))
#+end_src

*** Scheme

[[https://www.nongnu.org/geiser/index.html][Geiser]] is a collection of major and minor modes for Scheme hacking with support for several implementations. I've included the REPLs for [[https://racket-lang.org/][Racket]] and [[https://www.gnu.org/software/guile/][GNU Guile]].

#+begin_src emacs-lisp
  (use-package geiser
    :ensure t
    :hook (scheme-mode . geiser-mode))

  (use-package geiser-racket
    :ensure t
    :after geiser)

  (use-package geiser-guile
    :ensure t
    :after geiser)
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (rx "." (or "yml" "yaml") eos))
#+end_src

* Note-Taking with Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :bind (("C-c n b" . org-roam-node-from-buffer)
	   ("C-c n r" . org-roam-node-from-region)
	   ("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert))
    :custom
    (org-roam-directory (file-truename "~/Sync/Org Roam"))
    :config
    (org-roam-db-autosync-mode))
#+end_src

#+begin_src emacs-lisp
  (defun org-roam-node-from-region (start end)
    "Create an Org Roam node from the current region."
    (interactive "r")
    (let ((source-buffer (current-buffer)))
      (org-roam-node-find)
      (goto-char (point-max))
      (insert-buffer-substring source-buffer start end)))
#+end_src

#+begin_src emacs-lisp
  (defun org-roam-node-from-buffer (buffer)
    "Create an Org Roam node from the selected buffer."
    (interactive "b")
    (org-roam-node-find)
    (goto-char (point-max))
    (insert-buffer-substring buffer))
#+end_src

* Restoring Garbage Collection Thresholds

This configuration sets the garbage collection thresholds that were changed in [[* Inhibiting Garbage Collections During Initialization]] to lower values. This is done here, rather than in the ~after-init-hook~, so that the values are properly restored even when running Emacs with the ~-l~ command line option or when reloading this file with ~load-file~.

#+begin_src emacs-lisp
  (setq gc-cons-percentage gc-cons-percentage-low
	gc-cons-threshold gc-cons-threshold-low)

  (garbage-collect)
#+end_src
